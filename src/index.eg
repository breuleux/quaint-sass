
require:
   node-sass
   kaiser/reg as kreg
   path


class SassTransformer:

   constructor{@indented-syntax, @definitions, @variables} =
      @vcode = [items{@variables} each {k, v} -> '${k}: {v}'].join{";\n"} + ";\n"

   transform{code, p, resolve} =
      full-code = {@definitions, @vcode, code}.join{"\n"}
      css = node-sass.render-sync{
         data = full-code
         indented-syntax = @indented-syntax
         importer{var url, prev, done} =
            p2 = path.join{path.dirname{p}, '_{url}.sass'}
            resolve{p2}
            {file = p2}
      }.css.to-string{}


kreg.register{SassTransformer.prototype} with {
   type-id = "72a699f6-c6e9-11e5-8009-b7cc7a11abcd"
}


main{*match} =
   {@, options = {=}} when @is-quaint-engine ->

      @register-documents with {
         sass-variables = @quaint.MapDocument{}
      }

      rcompiler{ext}{resource} =
         resource & {
            dest = resource.dest.replace{new RegExp{'\.{ext}$'}, ".css"}
            dest-url = resource.dest-url.replace{new RegExp{'\.{ext}$'}, ".css"}
            type = .css
            transform = SassTransformer{
               ext === .sass
               options['{ext}Definitions'] or ""
               options.variables or {=}
            }
         }

      @formatters.html.register-transformers with {
         sass = {compile = rcompiler{.sass}}
         scss = {compile = rcompiler{.scss}}
      }

      icompiler{ext}{engine, body} =
         code = @tools.dedent{@tools.raw-relative{body}}
         engine.deferred with {path, docs} ->
            t = SassTransformer{
               ext === .sass
               options['{ext}Definitions'] or ""
               [options.variables or {=}] & docs.sass-variables.to-object{}
            }
            style[raw] %
               t.transform{code, docs.meta.get-raw{.orig-path}} with
                  file -> @read-resource{.resource, file}

      @register-macros with {
         sass = icompiler{.sass}
         scss = icompiler{.scss}
         sass-variables{engine, body} =
            body.statements{} each stmt ->
               match stmt.extract{"\\k = \\v", "\\k: \\v"}:
                  {=> k, => v} ->
                     engine.into{.sass-variables, {k.raw{}.replace{R"^\$", ""}, v.raw{}}}
                  else ->
                     throw E.sass{'Invalid sass variable declaration: {stmt.raw{}}'}
      }

   {options = {=}} ->
      {@} -> main{@, options}

provide = main

